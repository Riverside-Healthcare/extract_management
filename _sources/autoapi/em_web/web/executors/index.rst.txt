:mod:`em_web.web.executors`
===========================

.. py:module:: em_web.web.executors

.. autoapi-nested-parse::

   Jobs to run through exectutor.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   em_web.web.executors.executor_status
   em_web.web.executors.submit_executor
   em_web.web.executors.enable_task
   em_web.web.executors.disable_task
   em_web.web.executors.rescheduled_scheduled_tasks
   em_web.web.executors.run_scheduled_tasks
   em_web.web.executors.disabled_scheduled_tasks
   em_web.web.executors.schedule_errored_tasks
   em_web.web.executors.run_errored_tasks
   em_web.web.executors.run_active_tasks


.. function:: executor_status()

   Get list of active executor jobs.

   :url: /executor/status
   :returns: json list of active jobs.


.. function:: submit_executor(name, *args)

   Task Executor.

   Redis is used to track current executors. When an executor is launched
   it is added to Redis["executors"].

   The webapp can query /executor/status to get a listing of running
   tasks.

   :param name: name of function to call


.. function:: enable_task(task_id)

   Enable task.


.. function:: disable_task(task_id)

   Disable task.


.. function:: rescheduled_scheduled_tasks()

   Rescheduling scheduled tasks.


.. function:: run_scheduled_tasks()

   Running all scheduled tasks.


.. function:: disabled_scheduled_tasks()

   Disabling scheduled tasks.


.. function:: schedule_errored_tasks()

   Scheduling all errored tasks.


.. function:: run_errored_tasks()

   Running all errored tasks.


.. function:: run_active_tasks()

   Rerun all running tasks.


